worker_processes auto;
error_log /var/log/nginx/error.log;
#pid        logs/nginx.pid;

events {
	worker_connections 1024;
}

    http {
	include mime.types;
	default_type application/octet-stream;
	client_max_body_size 100m;
	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';
	access_log  /var/log/nginx/access.log  main;
	sendfile on;
	keepalive_timeout 65;
	
	#archlinux default SSL config
	ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
	ssl_dhparam /etc/ssl/certs/dhparam.pem;
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s; # Google DNS Servers
        resolver_timeout 5s;

	    server {
		listen 443 ssl;
		server_name www.cogitantium.com cogitantium.com;
		root /srv/http;
		index index.html;
		
		#errorpages
		error_page 403 /error/403.html;
		error_page 404 /error/404.html;
		error_page 405 /error/405.html;
		error_page 500 501 /error/500.html;
		error_page 502 /error/502.html;
		error_page 503 /error/503.html;
		error_page 504 /error/504.html;
		
		#compression
#		gzip on;
#		gzip_types	text/plain application/xml;
#		gzip_proxied 	no-cache no-store private expired auth;
#		gunzip on;
#		gzip_static on;
		
		ssl_certificate /etc/letsencrypt/live/cogitantium.com/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/cogitantium.com/privkey.pem;
		
		location /dirs {
		    index index.php;
		    include sites/php.conf;
#		    gzip_static on;
		    auth_basic "Restricted";
		    auth_basic_user_file /srv/http/dirs/.htpasswd;
		}	    
		
		location ^~ /error/ {
		    internal;
		    root /srv/http/;
		}

	    }

	    server {
		listen 8080;
		return 301 https://$host$request_uri;
	    }

}
